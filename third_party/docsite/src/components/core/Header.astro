---
import { ModeToggle } from "@/components/core/ModeToggle";
import HamNavMenu from "@/components/core/HamNavMenu.astro";
import NavMenu from "@/components/core/NavMenu.astro";
import { Search } from "@/components/core/Search";

import { Button } from "@/components/ui/button";

import { docconfig, SITE } from "config";
import { Github } from "lucide-react";
import Logo from "./Logo.astro";

// To pass the tailwindcss classes to the astro component
const { class: className } = Astro.props;
---

<header class:list={["py-4 px-6 md:px-16 lg:px-48 w-full sticky top-0 z-50", className]}>
  <div class="flex justify-between items-center md:items-center md:space-x-0 md:max-w-8xl">
    <div class="font-bold md:flex md:flex-row items-center">
      <a href="/" class="md:flex no-underline w-[200px]">
        <Button
          client:load
          className="flex gap-2 hover:no-underline text-2xl text-slate-700 dark:text-slate-50"
          variant="link"
        >
          <Logo class="w-[160px] md:w-[180px]" />
        </Button>
      </a>
      <div class="hidden md:block">
        <NavMenu />
      </div>
    </div>

    <div class="flex flex-row gap-2 md:px-8">
      {!docconfig.hide_search && <Search client:only="react" />}
      {
        !docconfig.hide_repo_button && (
          <a href={SITE.repo} target="_blank">
            <Button client:load className="" variant="ghost" size="icon">
              <Github className="w-[1.2rem] h-[1.2rem]" />
            </Button>
          </a>
        )
      }
      <div class="md:hidden flex flex-row-reverse gap-4">
        <HamNavMenu />
        <ModeToggle client:load transition:persist />
      </div>

      <div class="flex-row gap-4 hidden md:flex">
        <ModeToggle client:load transition:persist />
      </div>
    </div>
  </div>
</header>

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "theme-light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "theme-light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (ev) => {
    // Pass the incoming document to set the theme on it
    setDarkMode(ev.newDocument);
  });
</script>
